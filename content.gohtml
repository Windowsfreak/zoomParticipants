<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Zoom-Teilnehmer</title>
    <script src="random-js.min.js"></script>
    <link rel="icon" href="workshop.png" type="image/png">
    <style>
        html, body {
            height: 100vh;
            margin: 0;
            padding: 0;
        }
        body {
            font-family: Arial, sans-serif;
            transition: background-color 0.3s, color 0.3s;
        }
        @media (prefers-color-scheme: dark) {
            body {
                background-color: #121212;
                color: #e0e0e0;
            }
            input, button {
                background-color: #333;
                color: #e0e0e0;
                border: 1px solid #555;
            }
        }
        @media (prefers-color-scheme: light) {
            body {
                background-color: #ffffff;
                color: #333;
            }
            input, button {
                background-color: #f0f0f0;
                color: #333;
                border: 1px solid #ccc;
            }
        }
        h1, h2, p {
            margin: 0 0 10px 0;
        }
        .container {
            margin: 0 auto;
            height: 100vh;
            display: flex;
            flex-direction: column;
        }
        .header {
            flex: 0 0 auto;
            text-align: center;
            margin: 20px 0;
        }
        .password-form {
            text-align: center;
            margin-bottom: 20px;
        }
        .add-account-form {
            text-align: center;
            margin-top: 20px;
        }
        .add-account-form div {
            margin-bottom: 10px;
        }
        .add-account-form input {
            padding: 5px;
            width: 250px;
        }
        .participants-container {
            flex: 1;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            flex-wrap: wrap;
            gap: 2px;
            align-content: center;
            justify-content: flex-start;
            position: relative;
        }
        .participant {
            height: 30px;
            line-height: 30px;
            flex: 0 0 auto;
            box-sizing: border-box;
            padding: 0 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            background-color: rgba(0,0,0,0.05);
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            position: relative;
            transition: transform 0.5s ease, background-color 0.5s ease, opacity 0.3s ease;
        }
        .participant.added {
            opacity: 0;
            transform: translateY(10px);
            animation: fadeIn 1s forwards;
        }
        .participant.removed {
            text-decoration: line-through;
            opacity: 1;
            animation: fadeOut 1s forwards;
        }
        @keyframes fadeIn {
            to { opacity: 1; transform: translateY(0); }
        }
        @keyframes fadeOut {
            to { opacity: 0; transform: translateY(-10px); }
        }
        .participant span {
            user-select: none;
        }
        @keyframes blinkBorder {
            0%, 100% { outline-color: transparent; }
            50% { outline-color: #ff0000; }
        }
        .participant.blinking {
            outline: 2px solid;
            animation: blinkBorder 1s ease-in-out 5;
            animation-fill-mode: forwards;
        }
        .confetti-particle {
            position: absolute;
            width: 10px;
            height: 10px;
            background-color: hsl(var(--hue), 50%, 70%); /* Muted colors */
            animation: confettiFall 6s linear infinite;
            opacity: 0.7;
            transition: opacity 3s ease-out;
        }
        .confetti-particle.fade-out {
            opacity: 0;
        }
        @keyframes confettiFall {
            0% { transform: translateY(-100vh) rotate(0deg); opacity: 1; }
            100% { transform: translateY(100vh) rotate(1080deg); opacity: 0; }
        }
        @media (prefers-color-scheme: dark) {
            .participant {
                border: 1px solid #444;
                background-color: rgba(255,255,255,0.1);
            }
        }
        .button-group {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin-bottom: 10px;
        }
        button {
            padding: 10px 20px;
            cursor: pointer;
        }
    </style>
</head>
<body>
<div class="container">
    <div class="header">
        <h1>Zoom-Teilnehmer</h1>
        {{ if .Authenticated }}
        <h2>Meeting: {{ .MeetingTopic }}</h2>
        <p>Teilnehmer: {{ .ParticipantCount }}</p>
        <p>Letzte Aktualisierung: <span id="updated">{{ .Updated }}</span></p>
        <div class="button-group">
            <button id="copy" onclick="copyToClipboard()">Liste in Zwischenablage kopieren</button>
            <button id="startRaffleBtn" onclick="startRaffle()">Ziehung</button>
            <div>
                <input type="number" id="waitTimeSpinner" min="1" max="30" value="5">
                <label for="waitTimeSpinner">Sek.</label>
            </div>
        </div>
        <form id="refreshForm" method="POST" action="/" style="display:none;">
            <input type="hidden" name="password" value="{{ .Password }}" />
        </form>
        {{ end }}
    </div>
    {{ if .Authenticated }}
    <div class="participants-container">
        {{ range $index, $name := .Participants }}
        <div class="participant"><span>{{ add $index 1 }}. </span>{{ $name }}</div>
        {{ end }}
    </div>
    <script>
        function copyToClipboard() {
            const participants = document.querySelectorAll('.participant');
            let text = Array.from(participants)
                .map(p => p.textContent)
                .join('\n');
            navigator.clipboard.writeText(text)
                // change the button name for a few seconds
                .then(() => {
                    const button = document.querySelector('#copy');
                    if (!button) return;
                    button.textContent = 'In Zwischenablage kopiert!';
                    setTimeout(() => {
                        button.textContent = 'Liste in Zwischenablage kopieren';
                    }, 2000);
                })
                .catch(err => alert('Fehler beim Kopieren: ' + err));
        }

        let participants;
        let container;
        let winner;
        let raffleInProgress = false;

        function isDarkMode() {
            return window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
        }

        function getBackgroundColorForMode(hue) {
            if (isDarkMode()) {
                // Muted, less intense for dark mode
                return `hsl(${hue}, 30%, 40%)`;
            } else {
                // Brighter for light mode
                return `hsl(${hue}, 70%, 80%)`;
            }
        }

        function randomScale() {
            return 0.8 + Math.random() * 0.4;
        }

        function randomHue() {
            return Math.floor(Math.random() * 360);
        }

        function applyRandomStyles() {
            participants.forEach(part => {
                const scale = randomScale();
                const hue = randomHue();
                part.style.transform = `scale(${scale})`;
                part.style.backgroundColor = getBackgroundColorForMode(hue);
                part.style.opacity = 1;
                part.style.zIndex = 1;
            });
        }
        function applyRandomTransition() {
            const i = Math.floor(Math.random() * participants.length);
            const part = participants[i];
            const scale = randomScale();
            const hue = randomHue();
            part.style.transform = `scale(${scale})`;
            part.style.backgroundColor = getBackgroundColorForMode(hue);
            part.style.opacity = 1;
            part.style.zIndex = 1;
        }
        const random = new Random(browserCrypto);
        function startRaffle() {
            if (raffleInProgress) return;
            document.getElementById('startRaffleBtn').textContent = 'Ziehung lÃ¤uft...';
            document.getElementById('startRaffleBtn').disabled = true;
            document.getElementById('waitTimeSpinner').disabled = true;
            raffleInProgress = true;
            const particles = document.querySelectorAll('.confetti-particle');
            particles.forEach(p => p.remove());

            participants = document.querySelectorAll('.participant');
            container = document.querySelector('.participants-container');
            const iterations = parseInt(document.getElementById('waitTimeSpinner').value) * 100;
            let currentIteration = 0;
            const interval = 10; // ms per iteration

            applyRandomStyles();
            const intervalId = setInterval(() => {
                applyRandomTransition();
                currentIteration++;
                if (currentIteration >= iterations) {
                    clearInterval(intervalId);
                    selectWinner();
                }
            }, interval);
        }
        function selectWinner() {
            const participantsArray = Array.from(participants);
            const winnerIndex = random.integer(0, participantsArray.length - 1);
            winner = participantsArray[winnerIndex];
            const scaleFactor = 2; // The enlargement scale for the winner

            // Get winner's current position and size (pre-scale)
            const winnerRect = winner.getBoundingClientRect();
            const winnerCenterX = winnerRect.left + winnerRect.width / 2;
            const winnerCenterY = winnerRect.top + winnerRect.height / 2;

            // Get viewport center
            const containerRect = container.getBoundingClientRect();
            const viewportWidth = window.innerWidth;
            const viewportHeight = window.innerHeight;
            const centerX = viewportWidth / 2;
            let centerY = viewportHeight / 2;
            if (centerY < containerRect.y + winnerRect.height / 2 * scaleFactor) {
                centerY = containerRect.y + winnerRect.height / 2 * scaleFactor;
            }

            // Calculate translation to viewport center, adjusted for scale
            const translateX = (centerX - winnerCenterX) / scaleFactor;
            const translateY = (centerY - winnerCenterY) / scaleFactor;

            // Reset non-winners to default size and fade
            participantsArray.forEach((part, index) => {
                if (index !== winnerIndex) {
                    part.style.transform = 'scale(1)'; // Back to default size
                    part.style.backgroundColor = ''; // Reset to original or CSS default
                    part.style.opacity = 0.5;
                    part.style.zIndex = 0;
                }
            });

            // Enlarge and move winner to center
            winner.style.transform = `scale(${scaleFactor}) translate(${translateX}px, ${translateY}px)`;
            winner.style.zIndex = 10;
            winner.style.opacity = 1;

            // Trigger celebration after a short delay
            setTimeout(startCelebration, 1000);
        }
        function startCelebration() {
            const myWinner = winner;
            myWinner.classList.add('blinking');

            // Generate 50 confetti particles, attached to body
            for (let i = 0; i < 150; i++) {
                const particle = document.createElement('div');
                particle.classList.add('confetti-particle');
                particle.style.left = `${Math.random() * 100}%`;
                particle.style.animationDelay = `${Math.random() * 6}s`;
                particle.style.setProperty('--hue', Math.floor(Math.random() * 360));
                document.body.appendChild(particle);
            }
            raffleInProgress = false;
            document.getElementById('startRaffleBtn').textContent = 'Ziehung';
            document.getElementById('startRaffleBtn').disabled = false;
            document.getElementById('waitTimeSpinner').disabled = false;


            setTimeout(() => {
                myWinner.classList.remove('blinking');
            }, 5000);
        }

        const viewerPassword = document.getElementsByName('password')[0].value;
        const ws = new WebSocket(`ws://${window.location.host}/ws?password=${encodeURIComponent(viewerPassword)}`);

        ws.onopen = () => {
            console.log('WebSocket connected');
        };

        ws.onmessage = (event) => {
            const update = JSON.parse(event.data);
            container = document.querySelector('.participants-container');

            if (update.action === 'reset') {
                // Clear and rebuild for full resets (e.g., meeting ended)
                container.innerHTML = '';
                if (update.participants) {
                    update.participants.forEach(name => addParticipant(name));
                }
                renumberParticipants();
            } else if (update.action === 'add') {
                addParticipant(update.name);
                renumberParticipants();
            } else if (update.action === 'remove') {
                removeParticipant(update.name);
            }
            document.getElementById('updated').textContent = new Date().toLocaleString();
        };

        function addParticipant(name) {
            const div = document.createElement('div');
            div.className = 'participant added';
            div.textContent = name;
            div.appendChild(document.createElement('span'));
            container.appendChild(div);
            setTimeout(() => div.classList.remove('added'), 1000);
        }

        function removeParticipant(name) {
            const div = Array.from(container.children).findLast(el => {
                const textNodes = Array.from(el.childNodes).filter(node => node.nodeType === Node.TEXT_NODE);
                if (textNodes.length > 0) {
                    return textNodes[0].textContent.trim() === name;
                }
                return false;
            });
            if (div) {
                div.classList.add('removed');
                div.addEventListener('animationend', () => {
                    div.remove()
                    renumberParticipants();
                });
            }
        }

        function renumberParticipants() {
            const participants = document.querySelectorAll('.participant');
            participants.forEach((part, index) => {
                const span = part.querySelector('span');
                if (span) {
                    span.textContent = `${index + 1}. `;
                }
            });
        }

        ws.onclose = () => {
            console.log('WebSocket closed');
        };

        setInterval(() => {
            if (ws.readyState === WebSocket.OPEN) {
                ws.send('keepalive');
            }
        }, 30000);
    </script>
    {{ else }}
    <div class="password-form">
        <h3>Teilnehmerliste einsehen</h3>
        <form method="POST" action="/">
            <label for="password">Passwort eingeben:</label>
            <input type="password" id="password" name="password" required>
            <button type="submit">Absenden</button>
        </form>
    </div>
    <div class="add-account-form">
        <h3>Neues Konto hinzufÃ¼gen</h3>
        <form method="POST" action="/add-account">
            <div>
                <label for="account_id">Konto-ID:</label>
                <input type="text" id="account_id" name="account_id" required>
            </div>
            <div>
                <label for="secret_token">Geheimer SchlÃ¼ssel:</label>
                <input type="password" id="secret_token" name="secret_token" required minlength="15">
            </div>
            <div>
                <label for="viewer_password">Zugangskennwort:</label>
                <input type="password" id="viewer_password" name="viewer_password" required minlength="15">
            </div>
            <button type="submit">HinzufÃ¼gen</button>
            {{ if .ErrorMessage }}
            <p style="color: red;">{{ .ErrorMessage }}</p>
            {{ end }}
        </form>
    </div>
    {{ end }}
</div>
</body>
</html>